#!/usr/bin/env node

/* Sets up the environment variables from your .env file*/
require("dotenv").config();

/**
 * Module dependencies.
 */

const { app, sessionStore } = require("../app");
const http = require("http");
const db = require("../db");
const onlineUsers = require("../onlineUsers");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "3001");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces, and sync database.
 */

const { Server } = require("socket.io");
const cookieParser = require("cookie-parser");
const userAuthMW = require("../userAuthMW");
const io = new Server(server);

// get userInfo from httpOnly cookie
const wrapper = (middleware) => (socket, next) =>
  middleware(socket.request, {}, next);

io.use(wrapper(cookieParser()));
io.use(wrapper(userAuthMW));

// add middleware to attach userId to socket securely
io.use((socket, next) => {
  // only authenticated users allowed thru
  if (!socket.request.user.id) {
    return next(new Error("User not authenticated"));
  }

  if (!socket.userId) {
    socket.userId = socket.request.user.id;
    socket.user = socket.request.user;
  }
  next();
});

io.on("connection", (socket) => {
  socket.on("go-online", () => {
    const id = socket.userId;

    // add user to their own private room
    socket.join(id);

    if (!onlineUsers.includes(id)) {
      onlineUsers.push(id);
    }
    // send the user who just went online to everyone else who is already online
    socket.broadcast.emit("add-online-user", id);
  });

  socket.on("new-message", (data) => {
    // send message to given user's "room"
    const { recipientId } = data;

    // we will specify sender as currently authenticated user
    // to prevent sender ID spoofing
    let sender = null;
    if (data.sender) {
      sender = socket.user;
    }

    socket.to(recipientId).emit("new-message", {
      message: data.message,
      sender,
    });
  });

  socket.on("logout", (id) => {
    if (onlineUsers.includes(id)) {
      userIndex = onlineUsers.indexOf(id);
      onlineUsers.splice(userIndex, 1);
      socket.broadcast.emit("remove-offline-user", id);
    }
  });

  socket.on("disconnect", async () => {
    const id = socket.userId;
    const socketsInRoom = await io.in(id).allSockets();

    // if user has other connections return
    if (socketsInRoom.size) return;

    if (onlineUsers.includes(id)) {
      userIndex = onlineUsers.indexOf(id);
      onlineUsers.splice(userIndex, 1);
      socket.broadcast.emit("remove-offline-user", id);
    }
  });

  socket.on("last-seen-message", (data) => {
    const { conversationId, lastSeenMessageId, senderId } = data;
    socket.to(senderId).emit("last-seen-message", {
      conversationId,
      lastSeenMessageId,
    });
  });
});

sessionStore
  .sync()
  .then(() => db.sync({ alter: true })) // ideally this should be done via migrations
  .then(() => {
    server.listen(port);
    server.on("error", onError);
    server.on("listening", onListening);
  });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;

  console.log("Listening on " + bind);
}
